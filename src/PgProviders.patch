--- libs/PgProviders/PgProfileProvider.cs	(revision 36)
+++ libs/PgProviders/PgProfileProvider.cs	(working copy)
@@ -252,6 +252,8 @@
 			if (!ProfileExists(username))
 				CreateProfileForUser(username, isAuthenticated);
 
+			UpdateActivityDates(username, isAuthenticated, false);
+
 			using (NpgsqlConnection dbConn = new NpgsqlConnection(m_ConnectionString))
 			{
 				using (NpgsqlCommand deleteCommand = dbConn.CreateCommand(),
@@ -320,8 +322,6 @@
 								insertCommand.ExecuteNonQuery();
 							}
 
-							UpdateActivityDates(username, isAuthenticated, false);
-
 							// Attempt to commit the transaction
 							dbTrans.Commit();
 						}
--- libs/PgProviders/PgSessionStateStoreProvider.cs	(revision 36)
+++ libs/PgProviders/PgSessionStateStoreProvider.cs	(working copy)
@@ -417,8 +417,8 @@
 				using (NpgsqlCommand dbCommand = dbConn.CreateCommand(),
 						delCommand = dbConn.CreateCommand())
 				{
-					if (newItem)
-					{
+					/*if (newItem)
+					{*/
 						// Delete existing expired session if exist
 						delCommand.CommandText = string.Format("DELETE FROM \"{0}\" WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName", m_TableName);
 
@@ -438,7 +438,7 @@
 						dbCommand.Parameters.Add("@LockDate", NpgsqlDbType.TimestampTZ).Value = DateTime.Now;
 						dbCommand.Parameters.Add("@Data", NpgsqlDbType.Text).Value = serializedItems;
 						dbCommand.Parameters.Add("@Flags", NpgsqlDbType.Integer).Value = 0;
-					}
+					/*}
 					else
 					{
 						// Update existing session
@@ -450,7 +450,7 @@
 						dbCommand.Parameters.Add("@SessionId", NpgsqlDbType.Varchar, 80).Value = id;
 						dbCommand.Parameters.Add("@ApplicationName", NpgsqlDbType.Varchar, 255).Value = m_ApplicationName;
 						dbCommand.Parameters.Add("@LockId", NpgsqlDbType.Integer).Value = lockId;
-					}
+					}*/
 
 					NpgsqlTransaction dbTrans = null;
 
@@ -459,11 +459,11 @@
 						dbConn.Open();
 						dbTrans = dbConn.BeginTransaction();
 
-						if (newItem)
-						{
+						/*if (newItem)
+						{*/
 							delCommand.Prepare();
 							delCommand.ExecuteNonQuery();
-						}
+						//}
 
 						dbCommand.Prepare();
 						dbCommand.ExecuteNonQuery();
